<%= form_for @user, html: { class: 'form' } do |f| %>
<div class="row">
  <div class="col-md-12">
    <%= render 'shared/error_messages', object: f.object %>
  </div>
</div>

<div class="row">
  <div class="col-md-4">
    <div class="form-group label-floating">
      <%= f.label :name, class: 'control-label' %>
      <%= f.text_field :name, class: 'form-control', required: true, 'data-parsley-pattern' => '/^[a-zA-ZÑñáéíóúü\\s\\.\']+$/' %>
    </div>
  </div>
  <div class="col-md-4">
    <div class="form-group label-floating">
      <%= f.label :username, class: 'control-label' %>
      <%= f.text_field :username, class: 'form-control' %>
    </div>
  </div>
  <div class="col-md-4">
    <div class="form-group label-floating">
      <%= f.label :email, class: 'control-label' %>
      <%= f.email_field :email, class: 'form-control', required: true %>
    </div>
  </div>
</div>

<div class="row remove-on-show">
  <div class="col-md-6">
    <div class="form-group label-floating">
      <%= f.label :password, class: 'control-label' %>
      <%= f.password_field :password, class: 'form-control', minlength: 6, required: true %>
    </div>
  </div>
  <div class="col-md-6">
    <div class="form-group label-floating">
      <%= f.label :password_confirmation, class: 'control-label' %>
      <%= f.password_field :password_confirmation, class: 'form-control',
      'data-parsley-equalto' => '#user_password', required: true %>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-md-12">
    <div class="form-group label-floating">
      <%= f.label :address, class: 'control-label' %>
      <%= f.text_field :address, class: 'form-control', required: true %>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-md-6">
    <div class="form-group label-floating">
      <%= f.label :phone_number, class: 'control-label' %>
      <%= f.phone_field :phone_number, class: 'form-control' %>
    </div>
  </div>
  <div class="col-md-6">
    <div class="form-group label-floating">
      <%= f.label :cell_phone_number, class: 'control-label' %>
      <%= f.phone_field :cell_phone_number, class: 'form-control' %>
    </div>
  </div>
</div>

<br><div class="card-header" data-background-color="orange">
  <%= content_tag(:h4, User.human_attribute_name(:roles), class: 'title') %>
</div><br>
<%= render partial: 'roles', locals: { available_roles: @roles, user_roles: @user.get_roles } %>

<%= f.file_field :avatar, multiple: false, accept: 'image/*', class: 'hidden',
  onchange: 'prepareToCrop(this);' %>
<%= f.hidden_field :crop_x %>
<%= f.hidden_field :crop_y %>
<%= f.hidden_field :crop_h %>
<%= f.hidden_field :crop_w %>

<%= f.submit t(:save), class: 'btn btn-primary pull-right remove-on-show' %>
<div class="clearfix"></div>
<% end %>

<script type="text/javascript">
$(document).ready(function(){
  // change modal title for crop_avatar feature
  // and render the content needed to make the feature work
  modal = $("#modal");
  modal.find(".modal-title").html("<%= t('crop_avatar') %>");
  modal.find(".modal-body").html("<%= j render 'jcrop_modal' %>");
});

function prepareToCrop(input){
  $("#modal").modal("show");

  if(input.files && input.files[0]){
    // init jcrop if there is at least 1 file selected
    // aspectRatio: 1 allows the selection to be always a square
    // boxWidth and boxHeight: determine the maximum width and height of the canvas
    // updateCoords when selecting or updating the selection to be cropped
    var reader = new FileReader();
    reader.onload = function (e) {
      $("#jcrop").html("").append("<img src=\""+e.target.result+"\" alt=\"\" />");
      $("#jcrop img").Jcrop({
        addClass: 'jcrop-centered',
        onSelect: updateCoords,
        onChange: updateCoords,
        aspectRatio: 1,
        boxWidth: 500,
        boxHeight: 500
      });
    }
    reader.readAsDataURL(input.files[0]);
    $(".crop-again").removeClass("hidden");
  }
}

function updateCoords(coords){
  // save the current coordinates of the selection into some fields
  $("#user_crop_x").val(coords.x);
  $("#user_crop_y").val(coords.y);
  $("#user_crop_h").val(coords.h);
  $("#user_crop_w").val(coords.w);
  // update the preview image so the user can see how it will be cropped
  updatePreview(coords);
}

function updatePreview(coords){
  // get the canvas and draw the selection
  var imageObj = $("#jcrop img")[0];
  var canvas = $("#canvas")[0];
  // canvas.width  = coords.w;
  // canvas.height = coords.h;
  var context = canvas.getContext("2d");
  context.drawImage(imageObj, coords.x, coords.y, coords.w, coords.h, 0, 0, canvas.width, canvas.height);
  // also, update the image in the card aside the form
  updateAvatar(png());
}

function updateAvatar(image) {
  $(".img.pointer").attr("src", image);
};

function png() {
  // parse the data of the canvas to a png image
  var png = $("#canvas")[0].toDataURL('image/png');
  $("#png").val(png);
  return png;
}
</script>

<% if @user.persisted? %>
<script type="text/javascript">
$(document).ready(function(){
  // the user is persisted so we dont require to update the password, it's optional
  $('#user_password').attr('required', false);
  $('#user_password_confirmation').attr('required', false);
});
</script>
<% end %>

<style media="screen">
/* make the default modal larger, to make the crop avatar feature more comfortable */
@media (min-width: 768px){
  .modal-dialog{ width: 768px !important; }
}
.jcrop-centered{ display: inline-block; }
#jcrop{ text-align: center; }
</style>
